@page "/ToDo"

@inject HttpClient Http

<EditForm Model="newToDoItem" OnValidSubmit="CreateToDo" class="border-1 border-bottom border-dark py-3">
    <div class="d-flex ps-4">
        <InputText class="col-10 me-2" type="text" placeholder="enter todo" @bind-Value="newToDoItem.Title" />
        <button class="btn btn-primary btn-sm">Add</button>
    </div>
</EditForm>

<ul class="text-start mt-3">
    @foreach (var toDoItem in toDoItems)
    {
        <li class="d-flex">
            <p class="col-10 fs-5 fw-normal">@toDoItem.Title</p>
            <button class="btn btn-close pt-2" @onclick=@((e) => RemoveToDo(toDoItem.Id))></button>
        </li>
    }
</ul>

<EditForm Model="newToDoItem"  class="border-1 border-top border-dark py-3">
    @foreach (var toDoItem in toDoItems)
    {
        <div class="form-group row">
            <label for="title" class="col-sm-2 col-form-label">
                Title
            </label>
            <div class="col-sm-10">
                <InputText id="title" class="form-control" placeholder="@toDoItem.Title" @bind-Value="@toDoItem.Title" />
            </div>
            <button class="btn btn-primary" type="submit" value="refresh" @onclick=@((e) => EditToDo(toDoItem))>Submit</button>
        </div>
    }
</EditForm>


@code {
    // CREATE
    ToDoItem newToDoItem = new();
    async Task CreateToDo()
    {

        var httpResponse = await Http.PostAsJsonAsync<ToDoItem>($"api/ToDo/CreateToDo", newToDoItem);
        Console.WriteLine(httpResponse);
    }

    // GET
    List<ToDoItem> toDoItems = new(); 
    protected override async Task OnInitializedAsync()
    {
        var itemList = await Http.GetFromJsonAsync<List<ToDoItem>>($"api/ToDo/GetToDos");
        toDoItems = itemList;
    }

    // DELETE
    async Task RemoveToDo(string id)
    {
        var httpResponse = await Http.DeleteAsync($"api/ToDo/RemoveToDo/{id}");
    }

    //UPDATE
    async Task EditToDo(ToDoItem toDoItem)
    {
        var httpResponse = await Http.PutAsJsonAsync($"api/ToDo/EditToDo", toDoItem);
    }
}
